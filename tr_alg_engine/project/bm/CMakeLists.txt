cmake_minimum_required(VERSION 3.8)
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 17)
endif()
project(tr_alg_engine)
include_directories(/data//thoreyes/ros/alg_module_base/include/alg_module_base)
link_directories(/data//thoreyes/ros/alg_module_base/lib)
set(tr_interfaces_DIR /data//thoreyes/ros/thoreyes_base/install/share/tr_interfaces/cmake/)
set(tr_alg_interfaces_DIR /data//thoreyes/ros/alg_module_interfaces/share/tr_alg_interfaces/cmake/)
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 17)
endif()
add_compile_options(-Wdeprecated-declarations -Wsign-compare)
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic )
endif()
SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb -fno-omit-frame-pointer")
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
add_compile_options(-std=c++17)
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(rclpy REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(fmt CONFIG REQUIRED)
find_package(rclcpp_action REQUIRED)
find_package(builtin_interfaces REQUIRED)
find_package(std_msgs REQUIRED)
find_package(rosidl_default_generators REQUIRED)
find_package(visualization_msgs REQUIRED)
find_package(tr_alg_interfaces REQUIRED)
find_package(tr_interfaces REQUIRED)
if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  set(ament_cmake_copyright_FOUND TRUE)
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()
MESSAGE("System Arch: " ${CMAKE_SYSTEM_PROCESSOR})
if(CMAKE_SYSTEM_PROCESSOR MATCHES "amd64.*|x86_64.*|AMD64.*")
        set(X86_64 1)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64.*|AARCH64.*|arm64.*|ARM64.*)")
        set(AARCH64 1)
endif()
set(Boost_DIR /usr/lib/x86_64-linux-gnu/cmake/Boost-1.74.0/)
find_package(Boost REQUIRED COMPONENTS stacktrace_addr2line stacktrace_backtrace NO_DEFAULT_PATH)
if (CMAKE_BUILD_TYPE EQUAL "Debug")
  ADD_DEFINITIONS(-DDEBUG_TRACE)
endif()
include_directories(${Boost_INCLUDE_DIRS})
link_directories(${Boost_LIB_DIRS})
find_package(tinyxml2 REQUIRED)
include_directories(${TINYXML2_INCLUDE_DIRS})
link_directories(${TINYXML2_LIB_DIRS})
set(tinyxml2_LIBRARIES tinyxml2)
find_package(libsophon REQUIRED)
include_directories(${LIBSOPHON_INCLUDE_DIRS})
link_directories(${LIBSOPHON_LIB_DIRS})
set(SOPHON_LIBS bmion bmjpuapi bmjpulite bmlib bmrt bmvideo bmvppapi bmvpulite vpp cpuop usercpu vpp yuv video_bm bmcv)

set(FFMPEG_DIR  /opt/sophon/sophon-ffmpeg-latest/lib/cmake)
find_package(FFMPEG REQUIRED NO_DEFAULT_PATH)
include_directories(${FFMPEG_INCLUDE_DIRS})
link_directories(${FFMPEG_LIB_DIRS})

set(OpenCV_DIR /opt/sophon/sophon-opencv-latest/lib/cmake/opencv4)
find_package(OpenCV REQUIRED NO_DEFAULT_PATH)
include_directories(${OpenCV_INCLUDE_DIRS})

include_directories(/opt/sophon/sophon-sail/include)
link_directories(/opt/sophon/sophon-sail/lib)

ADD_DEFINITIONS(-DUSE_BMCV -DUSE_FFMPEG -DUSE_OPENCV -D__DISPLAY__)
if(X86_64)
  ADD_DEFINITIONS(-DUSE_PCIE -DBM_PCIE_MODE)
endif()

SET(CMAKE_BUILD_TYPE "Release")
include_directories(../.././include)
file(GLOB SRC_FILES ../../src/*.cpp)
file(GLOB SRC_FILES_tr_alg_engine ../../src/tr_alg_engine//*.cpp)
file(GLOB SRC_FILES_tr_alg_engine_P ../../src/tr_alg_engine/bm/*.cpp)
file(GLOB SRC_FILES_jpeg_decode ../../src/jpeg_decode//*.cpp)
file(GLOB SRC_FILES_jpeg_decode_P ../../src/jpeg_decode/bm/*.cpp)
file(GLOB SRC_FILES_moniter ../../src/moniter//*.cpp)
file(GLOB SRC_FILES_moniter_P ../../src/moniter/bm/*.cpp)
add_library(${PROJECT_NAME}_share SHARED ${SRC_FILES} ${SRC_FILES_tr_alg_engine} ${SRC_FILES_tr_alg_engine_P} ${SRC_FILES_jpeg_decode} ${SRC_FILES_jpeg_decode_P} ${SRC_FILES_moniter} ${SRC_FILES_moniter_P} )
ament_target_dependencies(${PROJECT_NAME}_share
rclcpp
sensor_msgs
rclcpp_action
tr_alg_interfaces
tr_interfaces
)
target_link_libraries(${PROJECT_NAME}_share
fmt::fmt-header-only ${FFMPEG_LIBS} ${OpenCV_LIBS} ${SOPHON_LIBS} ${tinyxml2_LIBRARIES} ${Boost_LIBRARIES}  sail 
${tinyxml2_LIBRARIES} alg_module_base_share
)
install(DIRECTORY ../../include/ DESTINATION include/${PROJECT_NAME}/)
install(TARGETS ${PROJECT_NAME}_share EXPORT ${PROJECT_NAME}_share DESTINATION lib)
ament_export_targets(${PROJECT_NAME}_share HAS_LIBRARY_TARGET)
ament_export_dependencies(  
rclcpp
sensor_msgs
rclcpp_action
tr_alg_interfaces
tr_interfaces
)
ament_export_targets(${PROJECT_NAME}_share HAS_LIBRARY_TARGET)
ament_export_include_directories("include/${PROJECT_NAME}")
ament_export_libraries(${PROJECT_NAME}_share)
add_executable(tr_alg_engine_main ../.././node/tr_alg_engine_main.cpp)
target_link_libraries(tr_alg_engine_main ${PROJECT_NAME}_share)
install(TARGETS tr_alg_engine_main DESTINATION lib/${PROJECT_NAME})
ament_package()
add_executable(test_src_test_submodule_reload ../.././test_src/test_submodule_reload.cpp)
target_link_libraries(test_src_test_submodule_reload ${PROJECT_NAME}_share)
