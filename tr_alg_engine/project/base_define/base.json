{
    "init_env":[
      "if(NOT CMAKE_C_STANDARD)",
      "  set(CMAKE_C_STANDARD 99)",
      "endif()"      ,
      "if(NOT CMAKE_CXX_STANDARD)",
      "  set(CMAKE_CXX_STANDARD 17)",
      "endif()"      ,
      "add_compile_options(-Wdeprecated-declarations -Wsign-compare)"      ,
      "if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")",
      "  add_compile_options(-Wall -Wextra -Wpedantic )",
      "endif()",
      "SET(CMAKE_CXX_FLAGS_DEBUG \"$ENV{CXXFLAGS} -O0 -Wall -g -ggdb -fno-omit-frame-pointer\")",
      "SET(CMAKE_CXX_FLAGS_RELEASE \"$ENV{CXXFLAGS} -O3 -Wall\")",
      "add_compile_options(-std=c++17)",
      "find_package(ament_cmake REQUIRED)",
      "find_package(rclcpp REQUIRED)",
      "find_package(rclpy REQUIRED)",
      "find_package(sensor_msgs REQUIRED)",
      "find_package(fmt CONFIG REQUIRED)",
      "find_package(rclcpp_action REQUIRED)",
      
      "find_package(builtin_interfaces REQUIRED)",
      "find_package(std_msgs REQUIRED)",
      "find_package(rosidl_default_generators REQUIRED)",
      
      "find_package(visualization_msgs REQUIRED)",
      
      "find_package(tr_alg_interfaces REQUIRED)",
      "find_package(tr_interfaces REQUIRED)",
      
      "if(BUILD_TESTING)",
      "  find_package(ament_lint_auto REQUIRED)",
      "  set(ament_cmake_copyright_FOUND TRUE)",
      "  set(ament_cmake_cpplint_FOUND TRUE)",
      "  ament_lint_auto_find_test_dependencies()",
      "endif()",
      "MESSAGE(\"System Arch: \" ${CMAKE_SYSTEM_PROCESSOR})",
      "if(CMAKE_SYSTEM_PROCESSOR MATCHES \"amd64.*|x86_64.*|AMD64.*\")",
      "        set(X86_64 1)",
      "elseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"^(aarch64.*|AARCH64.*|arm64.*|ARM64.*)\")",
      "        set(AARCH64 1)",
      "endif()",
      "set(Boost_DIR /usr/lib/x86_64-linux-gnu/cmake/Boost-1.74.0/)",

      "find_package(Boost REQUIRED COMPONENTS stacktrace_addr2line stacktrace_backtrace NO_DEFAULT_PATH)",
      "if (CMAKE_BUILD_TYPE EQUAL \"Debug\")",
      "  ADD_DEFINITIONS(-DDEBUG_TRACE)",
      "endif()",
      "include_directories(${Boost_INCLUDE_DIRS})",
      "link_directories(${Boost_LIB_DIRS})",      
      "find_package(tinyxml2 REQUIRED)",
      "include_directories(${TINYXML2_INCLUDE_DIRS})",
      "link_directories(${TINYXML2_LIB_DIRS})",      
      "set(tinyxml2_LIBRARIES tinyxml2)"
    ],

    "ament_target_dependencies":[
        "rclcpp",
        "sensor_msgs",
        "rclcpp_action",
        "tr_alg_interfaces",
        "tr_interfaces"
    ],
    "ament_export_dependencies":[
        "rclcpp",
        "sensor_msgs",
        "rclcpp_action",
        "tr_alg_interfaces",
        "tr_interfaces"
    ],
    "src_remap":{"bm":"bm","ix":"ix","nv":"nv","hw":"hw","ix_cvcuda":"ix","nv_cvcuda":"nv"}
}