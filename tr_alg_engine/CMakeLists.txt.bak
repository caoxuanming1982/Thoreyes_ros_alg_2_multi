cmake_minimum_required(VERSION 3.8)

project(tr_alg_engine)


if(USE_BM)
  set(tr_interfaces_DIR /data/thoreyes/ros/thoreyes_base/install/share/tr_interfaces/cmake/)
  set(tr_alg_interfaces_DIR /data/thoreyes/ros/alg_module_interfaces/share/tr_alg_interfaces/cmake/)
  include_directories(/data/thoreyes/ros/alg_module_base/include/alg_module_base)
  link_directories(/data/thoreyes/ros/alg_module_base/lib)
  
elseif(USE_IX)
  set(tr_interfaces_DIR /data/thoreyes_ix/ros/thoreyes_base/install/share/tr_interfaces/cmake/)
  set(tr_alg_interfaces_DIR /data/thoreyes_ix/ros/alg_module_interfaces/share/tr_alg_interfaces/cmake/)
  include_directories(/data/thoreyes_ix/ros/alg_module_base/include/alg_module_base)
  link_directories(/data/thoreyes_ix/ros/alg_module_base/lib)
  
else()
  set(tr_interfaces_DIR /data/thoreyes_nv/ros/thoreyes_base/install/share/tr_interfaces/cmake/)
  set(tr_alg_interfaces_DIR /data/thoreyes_nv/ros/alg_module_interfaces/share/tr_alg_interfaces/cmake/)
  include_directories(/data/thoreyes_nv/ros/alg_module_base/include/alg_module_base)
  link_directories(/data/thoreyes_nv/ros/alg_module_base/lib)
  

endif()


if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()

# Default to C++17
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 17)
endif()

add_compile_options(-Wdeprecated-declarations -Wsign-compare)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic )
endif()

SET(CMAKE_BUILD_TYPE "Release")
SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb -fno-omit-frame-pointer")
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")


add_compile_options(-std=c++17)


# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(rclpy REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(fmt CONFIG REQUIRED)
find_package(rclcpp_action REQUIRED)

find_package(builtin_interfaces REQUIRED)
find_package(std_msgs REQUIRED)
find_package(rosidl_default_generators REQUIRED)

find_package(visualization_msgs REQUIRED)

find_package(tr_alg_interfaces REQUIRED)
find_package(tr_interfaces REQUIRED)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()
 


#find_package(tinyxlm2 REQUIRED)
#include_directories(${TINYXML2_INCLUDE_DIRS})
#link_directories(${TINYXML2_LIB_DIRS})

# define architecture
MESSAGE("System Arch: " ${CMAKE_SYSTEM_PROCESSOR})
if(CMAKE_SYSTEM_PROCESSOR MATCHES "amd64.*|x86_64.*|AMD64.*")
        set(X86_64 1)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64.*|AARCH64.*|arm64.*|ARM64.*)")
        set(AARCH64 1)
endif()

#set(USE_BM 1)

if(USE_BM)
# add libsophon
# sophon arch define
  ADD_DEFINITIONS(-DUSE_BMCV -DUSE_FFMPEG -DUSE_OPENCV -D__DISPLAY__)
  if(X86_64)
        ADD_DEFINITIONS(-DUSE_PCIE -DBM_PCIE_MODE)
  endif()


# add libsophon
  find_package(libsophon REQUIRED)
  include_directories(${LIBSOPHON_INCLUDE_DIRS})
  link_directories(${LIBSOPHON_LIB_DIRS})

  set(SOPHON_LIBS bmion bmjpuapi bmjpulite bmlib bmrt bmvideo bmvppapi bmvpulite vpp cpuop usercpu vpp yuv video_bm bmcv)

# add sophon-ffmpeg
  set(FFMPEG_DIR  /opt/sophon/sophon-ffmpeg-latest/lib/cmake)
  find_package(FFMPEG REQUIRED NO_DEFAULT_PATH)
  include_directories(${FFMPEG_INCLUDE_DIRS})
  link_directories(${FFMPEG_LIB_DIRS})


# add sophon-opencv
  set(OpenCV_DIR /opt/sophon/sophon-opencv-latest/lib/cmake/opencv4)
  find_package(OpenCV REQUIRED NO_DEFAULT_PATH)
  include_directories(${OpenCV_INCLUDE_DIRS})

# sophon sdk
  include_directories(
    /opt/sophon/sophon-sail/include
  )

  link_directories(
    /opt/sophon/sophon-sail/lib
  )

  ADD_DEFINITIONS(-DUSE_BM)
    
else()
  set(Torch_DIR  /opt/libtorch/share/cmake/Torch)
  set(ATen_DIR  /opt/libtorch/share/cmake/ATen)
  set(PYTORCH_DISABLE_TORCH_FUNCTION_DEPRECATION_WARNINGS 1)
  find_package(Torch REQUIRED)
  if(TORCH_FOUND)
    include_directories(${TORCH_INCLUDE_DIRS})
    message(STATUS "torch include ${TORCH_INCLUDE_DIRS}")
#    include_directories(${TORCH_INCLUDE_DIRS}/torch/csrc/api/include)
    link_directories(/opt/libtorch/lib)
    message(STATUS "torch libarys ${TORCH_LIBRARIES}")
    add_compile_options(${TORCH_CXX_FLAGS} -Wno-unused-parameter -Wsign-compare -Wvariadic-macros -Wunknown-pragmas)
  else()
    message(ERROR "torch not found")

  endif()

  set(OpenCV_DIR /usr/local/lib/cmake/opencv4)
  find_package(OpenCV REQUIRED NO_DEFAULT_PATH)
  include_directories(${OpenCV_INCLUDE_DIRS})
  link_directories(${OpenCV_LIB_DIRS})

  find_package(CUDA REQUIRED)

#  set(CUDA_INCLUDE_DIRS "/usr/local/cuda/include")
  include_directories(${CUDA_INCLUDE_DIRS})
  message(STATUS "cuda include ${CUDA_INCLUDE_DIRS}")
  message(STATUS "cuda lib ${CUDA_LIBRARIES}")

  find_package(OpenMP REQUIRED)
  if(OpenMP_FOUND)
    include_directories(${OpenMP_INCLUDE_DIRS})
    link_directories(${OpenMP_LIB_DIRS})
    set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} ${OPENMP_C_FLAGS})
    set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${OPENMP_CXX_FLAGS})
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${CMAKE_CXX_FLAGS}")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${CMAKE_CXX_FLAGS}")
    message(STATUS "openmp found")
    message(STATUS "CMAKE_CXX_FLAGS ${OpenMP_CXX_FLAGS}")
    message(STATUS "CMAKE_C_FLAGS ${OpenMP_C_FLAGS}")

  else()
    set(OpenMP_LIBRARIES "")
  endif()
  

    ADD_DEFINITIONS(-DNDEBUG -DSTRIP_ERROR_MESSAGES)
  set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS}")  
  link_directories(    
    /usr/local/cuda/lib64
    /opt/libtorch/lib
    /opt/tinyxml2/lib
    /usr/lib/x86_64-linux-gnu
  )

endif()
set(Boost_DIR /usr/lib/x86_64-linux-gnu/cmake/Boost-1.74.0/)

#if(CMAKE_BUILD_TYPE=="Debug")
find_package(Boost REQUIRED COMPONENTS stacktrace_addr2line stacktrace_backtrace NO_DEFAULT_PATH)
if (CMAKE_BUILD_TYPE EQUAL "Debug")
  ADD_DEFINITIONS(-DDEBUG_TRACE)
endif()
#message(STATUS "use stack from exception")
#else()
#find_package(Boost REQUIRED COMPONENTS stacktrace_noop NO_DEFAULT_PATH)
#endif()
include_directories(${Boost_INCLUDE_DIRS})
link_directories(${Boost_LIB_DIRS})


find_package(tinyxml2 REQUIRED)
include_directories(${TINYXML2_INCLUDE_DIRS})
link_directories(${TINYXML2_LIB_DIRS})

set(tinyxml2_LIBRARIES tinyxml2)

include_directories(./include)

#link_directories(/usr/lib/x86_64-linux-gnu)



file(GLOB_RECURSE SRC_FILES src/*.cpp)

file(GLOB_RECURSE NODE_FILES node/*.cpp)

add_library(${PROJECT_NAME}_share SHARED ${SRC_FILES})
ament_target_dependencies(${PROJECT_NAME}_share
  rclcpp
  sensor_msgs
  rclcpp_action
  tr_alg_interfaces
  tr_interfaces
  )
if(USE_BM)
  target_link_libraries(${PROJECT_NAME}_share
    fmt::fmt-header-only
    ${FFMPEG_LIBS} ${OpenCV_LIBS} ${SOPHON_LIBS} ${tinyxml2_LIBRARIES} ${Boost_LIBRARIES} #${tr_interfaces_LIBRARIES} ${tr_alg_interfaces_LIBRARIES}
    sail alg_module_base_share
  )

elseif(USE_IX)
  target_link_libraries(${PROJECT_NAME}_share
    fmt::fmt-header-only
    ${FFMPEG_LIBS} ${OpenCV_LIBS} ${tinyxml2_LIBRARIES} ${TORCH_LIBRARIES} ${CUDA_LIBRARIES} -lcurl -ltiff -lnvidia-ml -lnvjpeg  ${Boost_LIBRARIES} ${OpenMP_LIBRARIES}#${tr_interfaces_LIBRARIES} ${tr_alg_interfaces_LIBRARIES}
    alg_module_base_share
  )

else()
  target_link_libraries(${PROJECT_NAME}_share
    fmt::fmt-header-only
    ${FFMPEG_LIBS} ${OpenCV_LIBS} ${tinyxml2_LIBRARIES} ${TORCH_LIBRARIES} ${CUDA_LIBRARIES} -lcurl -ltiff -lnvidia-ml -lnvjpeg  ${Boost_LIBRARIES} ${OpenMP_LIBRARIES}#${tr_interfaces_LIBRARIES} ${tr_alg_interfaces_LIBRARIES}
    alg_module_base_share
  )

endif()

install(DIRECTORY ./include/ DESTINATION include/${PROJECT_NAME}/)

install(
  TARGETS ${PROJECT_NAME}_share
  EXPORT ${PROJECT_NAME}_share
  DESTINATION lib)


ament_export_targets(${PROJECT_NAME}_share HAS_LIBRARY_TARGET)
ament_export_dependencies(  
  rclcpp
  sensor_msgs
  rclcpp_action
  tr_alg_interfaces
  tr_interfaces
  )
ament_export_include_directories("include/${PROJECT_NAME}")
ament_export_libraries(${PROJECT_NAME}_share)


foreach(NODE_FILE ${NODE_FILES})
#if (1==2)
  string(REGEX REPLACE ".+/(.+)\\..*" "\\1" TARGET_MAIN ${NODE_FILE})
  string(REPLACE .cpp _node TARGET_MAIN ${TARGET_MAIN})

  add_executable(${TARGET_MAIN} ${NODE_FILE})
  message(${TARGET_MAIN})

  target_link_libraries(${TARGET_MAIN}
   ${PROJECT_NAME}_share)

    install(TARGETS
      ${TARGET_MAIN}
        DESTINATION lib/${PROJECT_NAME})
#endif()
endforeach()


ament_package()
add_executable(test_submodule_reload  ./test_src/test_submodule_reload.cpp)
target_link_libraries(test_submodule_reload
    ${PROJECT_NAME}_share
)

