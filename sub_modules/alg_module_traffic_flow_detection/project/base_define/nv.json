{
    "init_env":[
        "set(Torch_DIR  /opt/libtorch/share/cmake/Torch)",
        "set(ATen_DIR  /opt/libtorch/share/cmake/ATen)",
        "set(PYTORCH_DISABLE_TORCH_FUNCTION_DEPRECATION_WARNINGS 1)",
        "find_package(Torch REQUIRED)",
        "if(TORCH_FOUND)",
        "  include_directories(${TORCH_INCLUDE_DIRS})",
        "  message(STATUS \"torch include ${TORCH_INCLUDE_DIRS}\")",
        "  link_directories(/opt/libtorch/lib)",
        "  message(STATUS \"torch libarys ${TORCH_LIBRARIES}\")",
        "  add_compile_options(${TORCH_CXX_FLAGS} -Wno-unused-parameter -Wsign-compare -Wvariadic-macros -Wunknown-pragmas)",
        "else()",
        "  message(ERROR \"torch not found\")",
        "",
        "endif()",
        "find_package(OpenCV REQUIRED)",
        "include_directories(${OpenCV_INCLUDE_DIRS})",
        "link_directories(${OpenCV_LIB_DIRS})",
        "if(OpenCV_FOUND)",
        "message(STATUS \"OpenCV library status:\")",
        "message(STATUS \"    config: ${OpenCV_DIR}\")",
        "message(STATUS \"    version: ${OpenCV_VERSION}\")",
        "message(STATUS \"    libraries: ${OpenCV_LIBS}\")",
        "message(STATUS \"    include path: ${OpenCV_INCLUDE_DIRS}\")",
        "  else()",
        "message(ERROR \"opencv not found\")",
        "endif()",
      
        "find_package(CUDA REQUIRED)",
        "ADD_DEFINITIONS(-DUSE_FP16)",
        "ADD_DEFINITIONS(-DUSE_CUDA)",      
        "ADD_DEFINITIONS(-DOPMIZE)",

        "include_directories(${CUDA_INCLUDE_DIRS})",
        "message(STATUS \"cuda include ${CUDA_INCLUDE_DIRS}\")",
        "ADD_DEFINITIONS(-DNDEBUG -DSTRIP_ERROR_MESSAGES)",
        "find_package(OpenMP REQUIRED)",
        "if(OpenMP_FOUND)",
        "  include_directories(${OpenMP_INCLUDE_DIRS})",
        "  link_directories(${OpenMP_LIB_DIRS})",
        "  set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} ${OPENMP_C_FLAGS})",
        "  set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${OPENMP_CXX_FLAGS})",
        "  SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} ${CMAKE_CXX_FLAGS}\")",
        "  SET(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} ${CMAKE_CXX_FLAGS}\")",
        "  message(STATUS \"openmp found\")",
        "  message(STATUS \"CMAKE_CXX_FLAGS ${OpenMP_CXX_FLAGS}\")",
        "  message(STATUS \"CMAKE_C_FLAGS ${OpenMP_C_FLAGS}\")",
        "",
        "else()",
        "  set(OpenMP_LIBRARIES \"\")",
        "endif()",
        ""
    ],
    "init_env_only_link":[
        "find_package(OpenCV REQUIRED)",
        "include_directories(${OpenCV_INCLUDE_DIRS})"    
    ],
    "link_lib":"${FFMPEG_LIBS} ${OpenCV_LIBS} ${tinyxml2_LIBRARIES}  ${TORCH_LIBRARIES} ${OpenMP_LIBRARIES}"
}