cmake_minimum_required(VERSION 3.8)
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 17)
endif()
project(test_alg_module_license_plate_detection_bm)
add_compile_options(-Wdeprecated-declarations -Wsign-compare)
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic )
endif()
SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb")
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
add_compile_options(-std=c++17)
MESSAGE("System Arch: " ${CMAKE_SYSTEM_PROCESSOR})
if(CMAKE_SYSTEM_PROCESSOR MATCHES "amd64.*|x86_64.*|AMD64.*")
        set(X86_64 1)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64.*|AARCH64.*|arm64.*|ARM64.*)")
        set(AARCH64 1)
endif()
find_package(tinyxml2 REQUIRED)
include_directories(${TINYXML2_INCLUDE_DIRS})
link_directories(${TINYXML2_LIB_DIRS})
set(tinyxml2_LIBRARIES tinyxml2)
include_directories(/data//thoreyes/ros/alg_module_base/include/alg_module_base)
link_directories(/data//thoreyes/ros/alg_module_base/lib)
SET(CMAKE_BUILD_TYPE "Release")
find_package(libsophon REQUIRED)
include_directories(${LIBSOPHON_INCLUDE_DIRS})
link_directories(${LIBSOPHON_LIB_DIRS})
set(SOPHON_LIBS bmion bmjpuapi bmjpulite bmlib bmrt bmvideo bmvppapi bmvpulite vpp cpuop usercpu vpp yuv video_bm bmcv)

set(FFMPEG_DIR  /opt/sophon/sophon-ffmpeg-latest/lib/cmake)
find_package(FFMPEG REQUIRED NO_DEFAULT_PATH)
include_directories(${FFMPEG_INCLUDE_DIRS})
link_directories(${FFMPEG_LIB_DIRS})

set(OpenCV_DIR /opt/sophon/sophon-opencv-latest/lib/cmake/opencv4)
find_package(OpenCV REQUIRED NO_DEFAULT_PATH)
include_directories(${OpenCV_INCLUDE_DIRS})

include_directories(/opt/sophon/sophon-sail/include)
link_directories(/opt/sophon/sophon-sail/lib)

ADD_DEFINITIONS(-DUSE_BMCV -DUSE_FFMPEG -DUSE_OPENCV -D__DISPLAY__)
if(X86_64)
  ADD_DEFINITIONS(-DUSE_PCIE -DBM_PCIE_MODE)
endif()

include_directories(../.././include)
include_directories(../.././deepsort/include)
add_executable(${PROJECT_NAME}_main  ../.././main.cpp)
target_link_libraries(${PROJECT_NAME}_main
${FFMPEG_LIBS} ${OpenCV_LIBS} ${SOPHON_LIBS} ${tinyxml2_LIBRARIES} sail 
${tinyxml2_LIBRARIES} alg_module_base_share
alg_module_license_plate_detection_bm_share
)