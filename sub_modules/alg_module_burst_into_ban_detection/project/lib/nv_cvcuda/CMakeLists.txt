cmake_minimum_required(VERSION 3.8)
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 17)
endif()
project(alg_module_burst_into_ban_detection_nv_cvcuda)
SET(CMAKE_INSTALL_PREFIX /data//thoreyes_nv/ros/alg_module_submodules)
include_directories(/data//thoreyes_nv/ros/alg_module_base/include/alg_module_base)
link_directories(/data//thoreyes_nv/ros/alg_module_base/lib)
add_compile_options(-Wdeprecated-declarations -Wsign-compare)
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic )
endif()
SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb")
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
add_compile_options(-std=c++17)
MESSAGE("System Arch: " ${CMAKE_SYSTEM_PROCESSOR})
if(CMAKE_SYSTEM_PROCESSOR MATCHES "amd64.*|x86_64.*|AMD64.*")
        set(X86_64 1)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64.*|AARCH64.*|arm64.*|ARM64.*)")
        set(AARCH64 1)
endif()
find_package(tinyxml2 REQUIRED)
include_directories(${TINYXML2_INCLUDE_DIRS})
link_directories(${TINYXML2_LIB_DIRS})
set(tinyxml2_LIBRARIES tinyxml2)
SET(CMAKE_BUILD_TYPE "Release")
find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
include_directories(../../.././include)
include_directories(../../.././deepsort/include)
file(GLOB_RECURSE SRC_FILES ../../../src/*.cpp)
add_library(${PROJECT_NAME}_share SHARED ${SRC_FILES})
