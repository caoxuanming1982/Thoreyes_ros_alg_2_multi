cmake_minimum_required(VERSION 3.8)
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 17)
endif()
project(alg_module_base_nv_cvcuda)
SET(CMAKE_INSTALL_PREFIX /data//thoreyes_nv/ros/alg_module_base)
add_compile_options(-Wdeprecated-declarations -Wsign-compare)
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic )
endif()
SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb")
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
add_compile_options(-std=c++17)
MESSAGE("System Arch: " ${CMAKE_SYSTEM_PROCESSOR})
if(CMAKE_SYSTEM_PROCESSOR MATCHES "amd64.*|x86_64.*|AMD64.*")
        set(X86_64 1)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64.*|AARCH64.*|arm64.*|ARM64.*)")
        set(AARCH64 1)
endif()
find_package(tinyxml2 REQUIRED)
include_directories(${TINYXML2_INCLUDE_DIRS})
link_directories(${TINYXML2_LIB_DIRS})
set(tinyxml2_LIBRARIES tinyxml2)
SET(CMAKE_BUILD_TYPE "Release")
include_directories(../../.././include)
include_directories(../../.././include_private)
set(Torch_DIR  /opt/libtorch/share/cmake/Torch)
set(ATen_DIR  /opt/libtorch/share/cmake/ATen)
set(PYTORCH_DISABLE_TORCH_FUNCTION_DEPRECATION_WARNINGS 1)
find_package(Torch REQUIRED)
if(TORCH_FOUND)
  include_directories(${TORCH_INCLUDE_DIRS})
  message(STATUS "torch include ${TORCH_INCLUDE_DIRS}")
  link_directories(/opt/libtorch/lib)
  message(STATUS "torch libarys ${TORCH_LIBRARIES}")
  add_compile_options(${TORCH_CXX_FLAGS} -Wno-unused-parameter -Wsign-compare -Wvariadic-macros -Wunknown-pragmas)
else()
  message(ERROR "torch not found")

endif()
find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
link_directories(${OpenCV_LIB_DIRS})
if(OpenCV_FOUND)
message(STATUS "OpenCV library status:")
message(STATUS "    config: ${OpenCV_DIR}")
message(STATUS "    version: ${OpenCV_VERSION}")
message(STATUS "    libraries: ${OpenCV_LIBS}")
message(STATUS "    include path: ${OpenCV_INCLUDE_DIRS}")
  else()
message(ERROR "opencv not found")
endif()
find_package(CUDA REQUIRED)
ADD_DEFINITIONS(-DUSE_FP16)
ADD_DEFINITIONS(-DOPTIMIZE)
include_directories(${CUDA_INCLUDE_DIRS})
message(STATUS "cuda include ${CUDA_INCLUDE_DIRS}")
ADD_DEFINITIONS(-DNDEBUG -DSTRIP_ERROR_MESSAGES)
find_package(OpenMP REQUIRED)
if(OpenMP_FOUND)
  include_directories(${OpenMP_INCLUDE_DIRS})
  link_directories(${OpenMP_LIB_DIRS})
  set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} ${OPENMP_C_FLAGS})
  set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${OPENMP_CXX_FLAGS})
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${CMAKE_CXX_FLAGS}")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${CMAKE_CXX_FLAGS}")
  message(STATUS "openmp found")
  message(STATUS "CMAKE_CXX_FLAGS ${OpenMP_CXX_FLAGS}")
  message(STATUS "CMAKE_C_FLAGS ${OpenMP_C_FLAGS}")

else()
  set(OpenMP_LIBRARIES "")
endif()
set(cvcuda_INCLUDE_DIRS /opt/nvidia/cvcuda0/include)
set(cvcuda_LIB_DIRS /opt/nvidia/cvcuda0/lib)
  include_directories(${cvcuda_INCLUDE_DIRS})
  link_directories(${cvcuda_LIB_DIRS})
  ADD_DEFINITIONS(-DUSE_CVCUDA)

file(GLOB SRC_FILES ../../../src/*.cpp)
file(GLOB SRC_FILES_CV_LIB ../../../src/cv_lib/*.cpp)
file(GLOB SRC_FILES_CV_LIB_P ../../../src/cv_lib/cvcuda/*.cpp)
file(GLOB SRC_FILES_NETWORK ../../../src/network_engine/*.cpp)
file(GLOB SRC_FILES_NETWORK_P ../../../src/network_engine/torch/*.cpp)
add_library(${PROJECT_NAME}_share SHARED ${SRC_FILES} ${SRC_FILES_CV_LIB} ${SRC_FILES_CV_LIB_P} ${SRC_FILES_NETWORK} ${SRC_FILES_NETWORK_P})
target_link_libraries(${PROJECT_NAME}_share
${FFMPEG_LIBS} ${OpenCV_LIBS} ${tinyxml2_LIBRARIES}  ${TORCH_LIBRARIES} ${OpenMP_LIBRARIES}  nvcv_types cvcuda 
${tinyxml2_LIBRARIES}
)
add_executable(${PROJECT_NAME}_test_cv_lib_main  ../../../test/test_cv_lib.cpp)
target_link_libraries(${PROJECT_NAME}_test_cv_lib_main 
${FFMPEG_LIBS} ${OpenCV_LIBS} ${tinyxml2_LIBRARIES}  ${TORCH_LIBRARIES} ${OpenMP_LIBRARIES}  nvcv_types cvcuda 
${tinyxml2_LIBRARIES}
${PROJECT_NAME}_share
)
