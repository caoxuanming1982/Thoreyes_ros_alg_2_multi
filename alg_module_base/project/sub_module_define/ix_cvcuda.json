{
    "init_env":[
"  if(NOT \"${CUDA_PATH}\" STREQUAL \"\")",
"    message(STATUS \"Use CUDA_PATH=${CUDA_PATH} from command argument\")",
"  elseif(DEFINED ENV{CUDA_PATH})",
"    set(CUDA_PATH \"$ENV{CUDA_PATH}\")",
"    message(STATUS \"Use CUDA_PATH=${CUDA_PATH} from enviroment\")",
"  else()",
"    set(CUDA_PATH \"/usr/local/corex\" CACHE PATH \"cuda installation root path\")",
"    message(STATUS \"Use CUDA_PATH=${CUDA_PATH} \")",
"  endif()",
"  if(NOT \"${COMPILER_PATH}\" STREQUAL \"\")",
"    set(CMAKE_CXX_COMPILER ${COMPILER_PATH}/clang++)",
"    set(CMAKE_C_COMPILER ${COMPILER_PATH}/clang)",
"  else()",
"    set(CMAKE_CXX_COMPILER ${CUDA_PATH}/bin/clang++)",
"    set(CMAKE_C_COMPILER ${CUDA_PATH}/bin/clang)",
"  endif()",
"  string(APPEND CMAKE_CXX_FLAGS \" --cuda-path=${CUDA_PATH}\")",
"  string(APPEND CMAKE_CXX_FLAGS \" --cuda-gpu-arch=${CUDA_ARCH}\")",
"  string(APPEND CMAKE_CXX_FLAGS \" -Wl,--disable-new-dtags\")",
"  string(APPEND CMAKE_CXX_FLAGS \" -mllvm -pragma-unroll-threshold=100000\")",
"  string(APPEND CMAKE_CXX_FLAGS \" -mllvm -unroll-threshold=5000\")",
"  string(APPEND CMAKE_CXX_FLAGS \" -Wno-unused-command-line-argument\")",
"  string(APPEND CMAKE_CXX_FLAGS \" -fcolor-diagnostics\")",
"  string(APPEND CMAKE_CXX_FLAGS \" -D_GLIBCXX_USE_CXX11_ABI=1\")",
"  find_library(",
"    CUDART_LIBRARY cudart",
"    PATHS",
"    ${CUDA_PATH}",
"    PATH_SUFFIXES",
"    cuda/lib",
"    cuda/lib64",
"    lib/x64",
"    lib64",
"    lib",
"    NO_DEFAULT_PATH",
"  )",
"  if(NOT CUDART_LIBRARY)",
"    message(FATAL \"Cannot find cudart\")",
"  endif()",
"  find_library(",
"    CUDA_DRIVER_LIBRARY cuda",
"    PATHS",
"    ${CUDA_PATH}",
"    PATH_SUFFIXES",
"    cuda/lib",
"    cuda/lib64",
"    lib/x64",
"    lib64",
"    lib",
"    NO_DEFAULT_PATH",
"  )",
"  if(NOT CUDA_DRIVER_LIBRARY)",
"    message(FATAL \"Cannot find cuda driver\")",
"  endif()",
"  find_library(",
"    JPEG_LIBRARY nvjpeg",
"    PATHS",
"    ${CUDA_PATH}",
"    PATH_SUFFIXES",
"    cuda/lib",
"    cuda/lib64",
"    lib/x64",
"    lib64",
"    lib",
"    NO_DEFAULT_PATH",
"  )",
"  if(NOT JPEG_LIBRARY)",
"    message(FATAL \"Cannot find jpeg library\")",
"  endif()",
"  ADD_DEFINITIONS(-DUSE_IX)",
"  set(TORCH_INCLUDE_DIRS /usr/local/corex/libtorch/include/;/usr/local/corex/libtorch/include/torch/csrc/api/include)",
"  set(TORCH_LIBRARIES caffe2_nvrtc;torch_global_deps;/usr/local/corex/lib64/libcuda.so;/usr/local/corex/lib64/libnvrtc.so;/usr/local/corex/lib64/libnvToolsExt.so;/usr/local/corex/lib64/libcudart.so;torch_cuda;c10_cuda)",
"  set(PYTORCH_DISABLE_TORCH_FUNCTION_DEPRECATION_WARNINGS 1)",
"  include_directories(${TORCH_INCLUDE_DIRS})",
"  message(STATUS \"torch include ${TORCH_INCLUDE_DIRS}\")",
"  link_directories(/usr/local/corex/libtorch/lib)",
"  message(STATUS \"torch libarys ${TORCH_LIBRARIES}\")",
"  add_compile_options(${TORCH_CXX_FLAGS} -Wno-unused-parameter -Wno-sign-compare -Wno-variadic-macros -Wno-unknown-pragmas -Wno-gnu-zero-variadic-macro-arguments -Wno-missing-declarations -Wno-writable-strings -Wno-unused-but-set-variable -Wno-unused-variable)",
"  set(OpenCV_DIR /usr/local/lib/cmake/opencv4)",
"  find_package(OpenCV REQUIRED)",
"  include_directories(${OpenCV_INCLUDE_DIRS})",
"  link_directories(${OpenCV_LIB_DIRS})",
"  if(OpenCV_FOUND)",
"    message(STATUS \"OpenCV library status:\")",
"    message(STATUS \"    config: ${OpenCV_DIR}\")",
"    message(STATUS \"    version: ${OpenCV_VERSION}\")",
"    message(STATUS \"    libraries: ${OpenCV_LIBS}\")",
"    message(STATUS \"    include path: ${OpenCV_INCLUDE_DIRS}\")",
"  else()",
"    message(ERROR \"opencv not found\")",
"  endif()",
"  set(CUDA_INCLUDE_DIRS \"/usr/local/corex/include\")",
"  include_directories(${CUDA_INCLUDE_DIRS})",
"  message(STATUS \"cuda include ${CUDA_INCLUDE_DIRS}\")",
"  ADD_DEFINITIONS(-DNDEBUG -DSTRIP_ERROR_MESSAGES)",
"  if(HAVE_OPENCV_CUDA)",
"    message(STATUS \"opencv with cuda\")",
"  endif()",
"  ADD_DEFINITIONS(-DUSE_FP16)",
        "ADD_DEFINITIONS(-DOPTIMIZE)",
"  ADD_DEFINITIONS(-DUSE_IX)",
"",
"set(cvcuda_LIB_DIRS /usr/local/corex/lib)",
        "  include_directories(${cvcuda_INCLUDE_DIRS})",  
        "  link_directories(${cvcuda_LIB_DIRS})",
        "  ADD_DEFINITIONS(-DUSE_CVCUDA)",
"  ADD_DEFINITIONS(-DCVCUDA_OLD)",
"include_directories(/data_temp/thoreyes_ix_cvcuda/ros/help_func_lib/include)",
"include_directories(/data/thoreyes_ix_cvcuda/ros/help_func_lib/include)",
"link_directories(/data_temp/thoreyes_ix_cvcuda/ros/help_func_lib/lib)",
"link_directories(/data/thoreyes_ix_cvcuda/ros/help_func_lib/lib)",
"link_directories(/usr/lib/x86_64-linux-gnu)",
""
    ],
    "init_env_only_link":[
        "find_package(OpenCV REQUIRED)",
        "include_directories(${OpenCV_INCLUDE_DIRS})",
"  if(NOT \"${CUDA_PATH}\" STREQUAL \"\")",
"    message(STATUS \"Use CUDA_PATH=${CUDA_PATH} from command argument\")",
"  elseif(DEFINED ENV{CUDA_PATH})",
"    set(CUDA_PATH \"$ENV{CUDA_PATH}\")",
"    message(STATUS \"Use CUDA_PATH=${CUDA_PATH} from enviroment\")",
"  else()",
"    set(CUDA_PATH \"/usr/local/corex\" CACHE PATH \"cuda installation root path\")",
"    message(STATUS \"Use CUDA_PATH=${CUDA_PATH} \")",
"  endif()",
"  if(NOT \"${COMPILER_PATH}\" STREQUAL \"\")",
"    set(CMAKE_CXX_COMPILER ${COMPILER_PATH}/clang++)",
"    set(CMAKE_C_COMPILER ${COMPILER_PATH}/clang)",
"  else()",
"    set(CMAKE_CXX_COMPILER ${CUDA_PATH}/bin/clang++)",
"    set(CMAKE_C_COMPILER ${CUDA_PATH}/bin/clang)",
"  endif()",
"  string(APPEND CMAKE_CXX_FLAGS \" --cuda-path=${CUDA_PATH}\")",
"  string(APPEND CMAKE_CXX_FLAGS \" --cuda-gpu-arch=${CUDA_ARCH}\")",
"  string(APPEND CMAKE_CXX_FLAGS \" -Wl,--disable-new-dtags\")",
"  string(APPEND CMAKE_CXX_FLAGS \" -mllvm -pragma-unroll-threshold=100000\")",
"  string(APPEND CMAKE_CXX_FLAGS \" -mllvm -unroll-threshold=5000\")",
"  string(APPEND CMAKE_CXX_FLAGS \" -Wno-unused-command-line-argument\")",
"  string(APPEND CMAKE_CXX_FLAGS \" -fcolor-diagnostics\")",
"  set(CUDA_INCLUDE_DIRS \"/usr/local/corex/include\")",
"  ADD_DEFINITIONS(-DUSE_IX)"
    ],
    "link_lib":"${FFMPEG_LIBS} ${OpenCV_LIBS} ${tinyxml2_LIBRARIES}  ${TORCH_LIBRARIES} ${OpenMP_LIBRARIES}  nvcv_types cvcuda ",
    "link_lib_engine":"fmt::fmt-header-only ${FFMPEG_LIBS} ${OpenCV_LIBS} ${tinyxml2_LIBRARIES}  ${TORCH_LIBRARIES} curl ixml help_func_lib -ltiff -lnvjpeg  ${Boost_LIBRARIES}  ${OpenMP_LIBRARIES}  nvcv_types cvcuda "

}